# -*- coding: utf-8 -*-
"""Project 2.IIT PATNA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hjnU8kK98BvBhdFA85tdtzCcXjr2cFs6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_csv('/content/IRIS.csv')

df.head()

df.tail()

display(df)

from sklearn.model_selection import train_test_split

X = df.drop('species', axis=1)
y = df['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training set shape (X_train, y_train):", X_train.shape, y_train.shape)
print("Testing set shape (X_test, y_test):", X_test.shape, y_test.shape)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)

new_input_data = pd.DataFrame({
    'sepal_length': [5.5, 6.0, 7.0],
    'sepal_width': [2.5, 3.0, 3.5],
    'petal_length': [4.0, 5.0, 6.0],
    'petal_width': [1.0, 1.5, 2.5]
})

predictions = model.predict(new_input_data)
display(predictions)

from sklearn.metrics import accuracy_score

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy of the model on the testing data:", accuracy)

from sklearn.metrics import accuracy_score, classification_report

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy of the model on the testing data:", accuracy)

# Display classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

from sklearn.model_selection import train_test_split

X = df.drop('Species', axis=1)
y = df['Species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Dataset divided into training and testing subsets.")
print("Training set shape (X_train, y_train):", X_train.shape, y_train.shape)
print("Testing set shape (X_test, y_test):", X_test.shape, y_test.shape)

from sklearn.tree import DecisionTreeClassifier

decision_tree_model = DecisionTreeClassifier(random_state=42)

decision_tree_model.fit(X_train, y_train)

print("Decision Tree Classifier trained successfully.")